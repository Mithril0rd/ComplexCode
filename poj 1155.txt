#include <cstdio>
#include <cstring>
#include <vector>

using namespace std;

const int MAX_N = 3001;
const int INF = 0x3f3f3f3f;

int n, m;
int dp[MAX_N][MAX_N], cnt[MAX_N];
struct node {
	int v, w, next;
	node():v(0),w(0),next(0){}
	node(const int &v, const int &w, const int &next):v(v),w(w),next(next){}
};
node edge[MAX_N << 1];
int edgecnt, head[MAX_N];

void addedge(int u, int v, int w) {
	edge[edgecnt].v = v;
	edge[edgecnt].w = w;
	edge[edgecnt].next = head[u];
	head[u] = edgecnt++;
}

void dfs(int u, int fa) {
	for (int i = head[u]; ~i; i = edge[i].next) {
		int v = edge[i].v, w = edge[i].w;
		if (v == fa) continue;
		dfs(v, u);
		cnt[u] += cnt[v]; 
		for (int i = cnt[u]; i >= 0; --i) {
			for (int j = 0; j <= i; ++j) {
				if (dp[u][i - j] != -INF && dp[v][j] != -INF) {
					dp[u][i] = max(dp[u][i], dp[u][i - j] + dp[v][j] - w);
				}
			}
		}
	}
} 

void solve() {
	dfs(1, -1);
	bool update = false;
	for (int i = m; i >= 1; --i) {
		if (dp[1][i] >= 0) {
			printf("%d\n", i);
			update = true;
			break;
		}
	}
	if (!update) puts("0");
}

int main() {
	scanf("%d%d", &n, &m);
	memset(head, -1, sizeof head);
	for (int i = 1; i <= n - m; ++i) {
		int k;
		scanf("%d", &k);
		for (int j = 0; j < k; ++j) {
			int v, w;
			scanf("%d%d", &v, &w);
			addedge(i, v, w);
			addedge(v, i, w);	
		}	
	}
	for (int i = 0; i <= n; ++i) {
		dp[i][0] = 0;
		for (int j = 1; j <= m; ++j) {
			dp[i][j] = -INF;
		}
	}
	for (int i = n - m + 1; i <= n; ++i) {
		scanf("%d", &dp[i][1]);
		cnt[i] = 1;
	} 
	solve(); 
	return 0;
}