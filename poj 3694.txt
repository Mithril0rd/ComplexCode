#include <cstdio>
#include <cstring>
#include <algorithm>

using namespace std;

const int MAX_V =  100001;
const int MAX_E =  200001;

int head[MAX_V];
struct node {
	int v, next;
	node():v(0), next(0) {}
	node(const int &v, const int &next):v(v), next(next) {}
} edge[MAX_E << 1];

int n, m, edgecnt, index, cnt;
int low[MAX_V], dfn[MAX_V];
int bridge[MAX_V], fat[MAX_V];

void Clear() {
	memset(head, -1, sizeof head);
	memset(edge, 0, sizeof edge);
	memset(low, 0, sizeof low);
	memset(dfn, 0, sizeof dfn);
	memset(bridge, 0, sizeof bridge); 
	for (int i = 0; i <= n; ++i) {
		fat[i] = i;
	}
	edgecnt = 0, index = 0, cnt = 0;
}

void addedge(int u, int v) {
	edge[edgecnt] = node(v, head[u]);
	head[u] = edgecnt++;
}

void tarjan(int u, int fa) {
	low[u] = dfn[u] = ++index;
	int child = 0;
	for (int i = head[u]; ~i; i = edge[i].next) {
		int v = edge[i].v;
		if (!dfn[v]) {
			++child;
			fat[v] = u;
			tarjan(v, u);
			low[u] = min(low[u], low[v]);
			if (low[v] > dfn[u]) {
				++cnt;
				bridge[v] = 1;
			}
		} else if (dfn[v] < dfn[u] && v != fa) {
			low[u] = min(low[u], dfn[v]);
		}
	}
	if (fa < 0 && child == 1) bridge[u] = 0;
}

void lca(int u, int v) {
	while (dfn[u] > dfn[v]) {
		if (bridge[u]) --cnt, bridge[u] = 0;
		u = fat[u];
	}
	while (dfn[v] > dfn[u]) {
		if (bridge[v]) --cnt, bridge[v] = 0;
		v = fat[v];
	}
	while (u != v) {
		if (bridge[u]) --cnt, bridge[u] = 0;
		if (bridge[v]) --cnt, bridge[v] = 0;
		u = fat[u], v = fat[v];
	}
}

void solve() {
	tarjan(1, -1);
	int q;
	scanf("%d", &q);
	while (q -- > 0) {
		int u, v;
		scanf("%d%d", &u, &v);
		lca(u, v);
		printf("%d\n", cnt);
	}
}

int main() {
	int cas = 0;
	while (2 == scanf("%d %d", &n, &m)) {
		if (0 == n && 0 == m) break;
		Clear(); 
		printf("Case %d:\n", ++cas);
		for (int i = 0; i < m; ++i) {
			int u, v;
			scanf("%d%d", &u, &v);
			addedge(u, v);
			addedge(v, u);
		}
		solve();
		puts("");
	}
	return 0;
}